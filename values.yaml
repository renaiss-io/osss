###############################################################
# BASE VARIABLES
###############################################################
global:
  domain: localhost

###############################################################
# NETWORK
###############################################################
cert-manager:
  enabled: true

external-dns:
  enabled: true

ingress-nginx:
  controller:
    watchIngressWithoutClass: true

    ingressClassResource:
      default: true

    metrics:
      enabled: true

      service:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "10254"

###############################################################
# DATABASES
###############################################################
cloudnative-pg:
  enabled: true

  crds:
    create: false

###############################################################
# IDP
###############################################################
keycloak-db:
  mode: standalone

  backups:
    enabled: false

  cluster:
    instances: 1
    storage:
      size: 2Gi

###############################################################
# MONITORING
###############################################################
prometheus:
  enabled: true

  # Disable pushgateway
  prometheus-pushgateway:
    enabled: false

  # Disable alertmanager
  alertmanager:
    enabled: false

promtail:
  enabled: true

  config:
    clients:
    - url: http://{{ .Release.Name }}-loki:3100/loki/api/v1/push

loki:
  enabled: true

  test:
    enabled: false

  gateway:
    enabled: false

  monitoring:
    dashboards:
      enabled: false

    lokiCanary:
      enabled: false

    selfMonitoring:
      enabled: false

      serviceMonitor:
        enabled: false

      grafanaAgent:
        installOperator: false

  loki:
    auth_enabled: false

    commonConfig:
      replication_factor: 1

    storage:
      type: filesystem

  singleBinary:
    replicas: 1

grafana:
  enabled: true
  assertNoLeakedSecrets: false
  envFromSecret: grafana-secret

  admin:
    # Generated with external secrets generator
    existingSecret: grafana-root-user

  # Enable hot reload of dashboards and datasources
  sidecar:
    dashboards:
      enabled: true
    datasources:
      enabled: true

  # Configure SSO with keycloak
  grafana.ini:
    server:
      root_url: "https://grafana.{{ .Values.global.domain }}"

    dashboards:
      default_home_dashboard_path: /tmp/dashboards/dashboard_main.json

    auth.generic_oauth:
      enabled: true
      name: keycloak
      allow_sign_up: true
      client_id: grafana
      client_secret: ${GENERIC_OAUTH_CLIENT_SECRET}
      scopes: openid email profile offline_access roles
      email_attribute_path: email
      login_attribute_path: username
      name_attribute_path: full_name
      auth_url: "https://keycloak.{{ .Values.global.domain }}/realms/master/protocol/openid-connect/auth"
      token_url: https://keycloak.{{ .Values.global.domain }}/realms/master/protocol/openid-connect/token
      api_url: https://keycloak.{{ .Values.global.domain }}/realms/master/protocol/openid-connect/userinfo
      role_attribute_path: contains(grafana.roles[], 'admin') && 'Admin' || contains(grafana.roles[], 'editor') && 'Editor' || 'Viewer'

###############################################################
# TOOLS
###############################################################
kimai2:
  enabled: false

  # TODO: use secret for root user
  kimaiAdminEmail: admin@example.com
  kimaiAdminPassword: adminadmin

  service:
    type: ClusterIP

  ingress:
    hostname: kimai.test.local

  configurationFromSecret:
    enabled: true

  mariadb:
    enabled: false

  # TODO: use secrets for DB credentials
  externalDatabase:
    host: osss-mariadb
    port: 3306
    user: kimai
    password: kimai
    database: kimai

openproject:
  enabled: false

  # Override hostname
  host: openproject.localhost

  # Root user configuration
  # TODO: use secret for root user
  admin_user:
    password: admin
    password_reset: false
    name: admin

  # SSO with keycloak
  # TODO: research if can be implemented in free version
  oidc:
    enabled: true
    provider: Keycloak
    displayName: Keycloak
    host: keycloak.localhost
    identifier: http://openprojects.localhost
    secret: asd
    issuer: http://keycloak.localhost/realms/osss
    authorizationEndpoint: /realms/osss/protocol/openid-connect/auth
    tokenEndpoint: /realms/osss/protocol/openid-connect/token
    userinfoEndpoint: /realms/osss/protocol/openid-connect/userinfo
    endSessionEndpoint: http://keycloak.localhost/realms/osss/protocol/openid-connect/logout

  # Limit cpu to work in minikube
  # TODO: parametrize and use default for minikube
  resources:
    limits:
      cpu: 1

  # Disable https (manage at ingress level)
  openproject:
    https: false

  # Use common postgresql
  postgresql:
    bundled: false

    # TODO: parametrize values
    connection:
      host: osss-postgresql
      port: 5432

    # TODO: use secrets for DB credentials
    auth:
      database: openproject
      username: testuser
      password: testpassword

  # Disable ingress
  ingress:
    enabled: false

wiki:
  enabled: false

  ingress:
    enabled: false

  postgresql:
    enabled: false

    # TODO: use secrets for DB credentials
    postgresqlHost: osss-postgresql
    postgresqlDatabase: wiki
    postgresqlUser: testuser
    existingSecret: osss-db
    existingSecretKey: password

planka:
  enabled: false

  admin_email: admin
  admin_password: admin
  admin_username: admin
  admin_name: admin

  baseUrl: "http://planka.{{ .Values.global.domain }}"
  secretkey: 4dab9dc2d9011d9114b9a96e531926598adad75c70b41e78311bf96097d327812c191091852b9a7ed90e56058b4ee52ba2398ba54398f7bc9c7827785cc3a342

  # TODO: set db hostname
  postgresql:
    enabled: false

    # TODO: use secrets for DB credentials
    auth:
      database: planka
      username: testuser
      password: testpassword

  # Do not enable unless a real domain is being used
  oidc:
    enabled: false

    clientId: planka
    clientSecret: nuWbw2dO8KAiU8ZMEO5KzQWqbt42dZy2
    issuerUrl: http://keycloak.{{ .Values.global.domain }}/realms/osss

# TODO: configure plane-ce
plane-ce:
  enabled: false

odoo:
  enabled: true

  service:
    type: ClusterIP

  postgresql:
    enabled: false

  # TODO: parametrize and use secrets
  externalDatabase:
    host: osss-postgresql
    port: 5432
    user: testuser
    database: odoo
    create: false
    password: testpassword
    postgresqlPostgresPassword: testpassword
    postgresqlPostgresUser: testuser
